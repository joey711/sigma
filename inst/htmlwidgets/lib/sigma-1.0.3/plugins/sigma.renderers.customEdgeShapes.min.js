! function() {
    "use strict";
    sigma.utils.pkg("sigma.canvas.edgehovers"), sigma.canvas.edgehovers.dashed = function(a, b, c, d, e) {
        var f = a.active ? a.active_color || e("defaultEdgeActiveColor") : a.color,
            g = e("prefix") || "",
            h = a[g + "size"] || 1,
            i = e("edgeColor"),
            j = e("defaultNodeColor"),
            k = e("defaultEdgeColor");
        if (!f) switch (i) {
            case "source":
                f = b.color || j;
                break;
            case "target":
                f = c.color || j;
                break;
            default:
                f = k
        }
        f = "edge" === e("edgeHoverColor") ? a.hover_color || f : a.hover_color || e("defaultEdgeHoverColor") || f, h *= e("edgeHoverSizeRatio"), d.save(), d.setLineDash([8, 3]), d.strokeStyle = f, d.lineWidth = h, d.beginPath(), d.moveTo(b[g + "x"], b[g + "y"]), d.lineTo(c[g + "x"], c[g + "y"]), d.stroke(), d.restore()
    }
}(),
function() {
    "use strict";
    sigma.utils.pkg("sigma.canvas.edgehovers"), sigma.canvas.edgehovers.dotted = function(a, b, c, d, e) {
        var f = a.active ? a.active_color || e("defaultEdgeActiveColor") : a.color,
            g = e("prefix") || "",
            h = a[g + "size"] || 1,
            i = e("edgeColor"),
            j = e("defaultNodeColor"),
            k = e("defaultEdgeColor");
        if (!f) switch (i) {
            case "source":
                f = b.color || j;
                break;
            case "target":
                f = c.color || j;
                break;
            default:
                f = k
        }
        f = "edge" === e("edgeHoverColor") ? a.hover_color || f : a.hover_color || e("defaultEdgeHoverColor") || f, h *= e("edgeHoverSizeRatio"), d.save(), d.setLineDash([2]), d.strokeStyle = f, d.lineWidth = h, d.beginPath(), d.moveTo(b[g + "x"], b[g + "y"]), d.lineTo(c[g + "x"], c[g + "y"]), d.stroke(), d.restore()
    }
}(),
function() {
    "use strict";
    sigma.utils.pkg("sigma.canvas.edgehovers"), sigma.canvas.edgehovers.parallel = function(a, b, c, d, e) {
        var f, g, h = a.active ? a.active_color || e("defaultEdgeActiveColor") : a.color,
            i = e("prefix") || "",
            j = a[i + "size"] || 1,
            k = e("edgeColor"),
            l = e("defaultNodeColor"),
            m = e("defaultEdgeColor"),
            n = b[i + "x"],
            o = b[i + "y"],
            p = c[i + "x"],
            q = c[i + "y"],
            r = sigma.utils.getDistance(n, o, p, q);
        if (!h) switch (k) {
            case "source":
                h = b.color || l;
                break;
            case "target":
                h = c.color || l;
                break;
            default:
                h = m
        }
        h = "edge" === e("edgeHoverColor") ? a.hover_color || h : a.hover_color || e("defaultEdgeHoverColor") || h, j *= e("edgeHoverSizeRatio"), f = sigma.utils.getCircleIntersection(n, o, j, p, q, r), g = sigma.utils.getCircleIntersection(p, q, j, n, o, r), d.save(), d.strokeStyle = h, d.lineWidth = j, d.beginPath(), d.moveTo(f.xi, f.yi), d.lineTo(g.xi_prime, g.yi_prime), d.closePath(), d.stroke(), d.beginPath(), d.moveTo(f.xi_prime, f.yi_prime), d.lineTo(g.xi, g.yi), d.closePath(), d.stroke(), d.restore()
    }
}(),
function() {
    "use strict";
    sigma.utils.pkg("sigma.canvas.edgehovers"), sigma.canvas.edgehovers.tapered = function(a, b, c, d, e) {
        var f = a.active ? a.active_color || e("defaultEdgeActiveColor") : a.color,
            g = e("prefix") || "",
            h = a[g + "size"] || 1,
            i = e("edgeColor"),
            g = e("prefix") || "",
            j = e("defaultNodeColor"),
            k = e("defaultEdgeColor"),
            l = b[g + "x"],
            m = b[g + "y"],
            n = c[g + "x"],
            o = c[g + "y"],
            p = sigma.utils.getDistance(l, m, n, o);
        if (!f) switch (i) {
            case "source":
                f = b.color || j;
                break;
            case "target":
                f = c.color || j;
                break;
            default:
                f = k
        }
        f = "edge" === e("edgeHoverColor") ? a.hover_color || f : a.hover_color || e("defaultEdgeHoverColor") || f, h *= e("edgeHoverSizeRatio");
        var q = sigma.utils.getCircleIntersection(l, m, h, n, o, p);
        d.save(), d.globalAlpha = .65, d.fillStyle = f, d.beginPath(), d.moveTo(n, o), d.lineTo(q.xi, q.yi), d.lineTo(q.xi_prime, q.yi_prime), d.closePath(), d.fill(), d.restore()
    }
}(),
function() {
    "use strict";
    sigma.utils.pkg("sigma.canvas.edges"), sigma.canvas.edges.dashed = function(a, b, c, d, e) {
        var f = a.active ? a.active_color || e("defaultEdgeActiveColor") : a.color,
            g = e("prefix") || "",
            h = a[g + "size"] || 1,
            i = e("edgeColor"),
            j = e("defaultNodeColor"),
            k = e("defaultEdgeColor");
        if (!f) switch (i) {
            case "source":
                f = b.color || j;
                break;
            case "target":
                f = c.color || j;
                break;
            default:
                f = k
        }
        d.save(), a.active ? d.strokeStyle = "edge" === e("edgeActiveColor") ? f || k : e("defaultEdgeActiveColor") : d.strokeStyle = f, d.setLineDash([8, 3]), d.lineWidth = h, d.beginPath(), d.moveTo(b[g + "x"], b[g + "y"]), d.lineTo(c[g + "x"], c[g + "y"]), d.stroke(), d.restore()
    }
}(),
function() {
    "use strict";
    sigma.utils.pkg("sigma.canvas.edges"), sigma.canvas.edges.dotted = function(a, b, c, d, e) {
        var f = a.active ? a.active_color || e("defaultEdgeActiveColor") : a.color,
            g = e("prefix") || "",
            h = a[g + "size"] || 1,
            i = e("edgeColor"),
            j = e("defaultNodeColor"),
            k = e("defaultEdgeColor");
        if (!f) switch (i) {
            case "source":
                f = b.color || j;
                break;
            case "target":
                f = c.color || j;
                break;
            default:
                f = k
        }
        d.save(), a.active ? d.strokeStyle = "edge" === e("edgeActiveColor") ? f || k : e("defaultEdgeActiveColor") : d.strokeStyle = f, d.setLineDash([2]), d.lineWidth = h, d.beginPath(), d.moveTo(b[g + "x"], b[g + "y"]), d.lineTo(c[g + "x"], c[g + "y"]), d.stroke(), d.restore()
    }
}(),
function() {
    "use strict";

    function shadeColor(color, percent) {

    var R = parseInt(color.substring(1,3),16);
    var G = parseInt(color.substring(3,5),16);
    var B = parseInt(color.substring(5,7),16);

    R = parseInt(R * (100 + percent) / 100);
    G = parseInt(G * (100 + percent) / 100);
    B = parseInt(B * (100 + percent) / 100);

    R = (R<255)?R:255;  
    G = (G<255)?G:255;  
    B = (B<255)?B:255;  

    var RR = ((R.toString(16).length==1)?"0"+R.toString(16):R.toString(16));
    var GG = ((G.toString(16).length==1)?"0"+G.toString(16):G.toString(16));
    var BB = ((B.toString(16).length==1)?"0"+B.toString(16):B.toString(16));

    return "#"+RR+GG+BB;
    }

    sigma.canvas.edges.parallel = function(edge, source, target, context, settings) {
    var color = edge.active ?
          edge.active_color || settings('defaultEdgeActiveColor') :
          edge.color,
        prefix = settings('prefix') || '',
        size = edge[prefix + 'size']*4/6 || 1,
        edgeColor = settings('edgeColor'),
        defaultNodeColor = settings('defaultNodeColor'),
        defaultEdgeColor = settings('defaultEdgeColor'),
        sX = source[prefix + 'x'],
        sY = source[prefix + 'y'],
        tX = target[prefix + 'x'],
        tY = target[prefix + 'y'],
        c,
        d,
        dist = sigma.utils.getDistance(sX, sY, tX, tY);

    if (!color)
      switch (edgeColor) {
        case 'source':
          color = source.color || defaultNodeColor;
          break;
        case 'target':
          color = target.color || defaultNodeColor;
          break;
        default:
          color = defaultEdgeColor;
          break;
      }

    // Intersection points of the source node circle:
    c = sigma.utils.getCircleIntersection(sX, sY, size, tX, tY, dist);

    // Intersection points of the target node circle:
    d = sigma.utils.getCircleIntersection(tX, tY, size, sX, sY, dist);

    context.save();

    if (edge.active) {
      context.strokeStyle = settings('edgeActiveColor') === 'edge' ?
        (color || defaultEdgeColor) :
        settings('defaultEdgeActiveColor');
    }
    else {
      context.strokeStyle = color;
    }

    var grd2=context.createLinearGradient(sX,sY,tX,tY);
    grd2.addColorStop(0,shadeColor(source.color,40)); 
    grd2.addColorStop(1,shadeColor(target.color,40));

    var grd3=context.createLinearGradient(sX,sY,tX,tY);
    grd3.addColorStop(0,shadeColor(source.color,40)); 
    grd3.addColorStop(1,shadeColor(target.color,40));

    context.globalAlpha = 0.65;
    context.lineWidth = size;
    context.beginPath();
    context.moveTo(c.xi, c.yi);
    context.lineTo(d.xi_prime, d.yi_prime);
    context.closePath();
    context.strokeStyle = grd3;
    context.stroke();

    context.beginPath();
    context.moveTo(c.xi_prime, c.yi_prime);
    context.lineTo(d.xi, d.yi);
    context.closePath();
    context.strokeStyle = grd2;
    context.stroke();

    context.restore();
  };
}(),
function() {
    "use strict";
    sigma.utils.pkg("sigma.canvas.edges");

    function shadeColor(color, percent) {

    var R = parseInt(color.substring(1,3),16);
    var G = parseInt(color.substring(3,5),16);
    var B = parseInt(color.substring(5,7),16);

    R = parseInt(R * (100 + percent) / 100);
    G = parseInt(G * (100 + percent) / 100);
    B = parseInt(B * (100 + percent) / 100);

    R = (R<255)?R:255;  
    G = (G<255)?G:255;  
    B = (B<255)?B:255;  

    var RR = ((R.toString(16).length==1)?"0"+R.toString(16):R.toString(16));
    var GG = ((G.toString(16).length==1)?"0"+G.toString(16):G.toString(16));
    var BB = ((B.toString(16).length==1)?"0"+B.toString(16):B.toString(16));

    return "#"+RR+GG+BB;
    }

    /**
   * This method renders the edge as a tapered line.
   * Danny Holten, Petra Isenberg, Jean-Daniel Fekete, and J. Van Wijk (2010)
   * Performance Evaluation of Tapered, Curved, and Animated Directed-Edge
   * Representations in Node-Link Graphs. Research Report, Sep 2010.
   *
   * @param  {object}                   edge         The edge object.
   * @param  {object}                   source node  The edge source node.
   * @param  {object}                   target node  The edge target node.
   * @param  {CanvasRenderingContext2D} context      The canvas context.
   * @param  {configurable}             settings     The settings function.
   */
  sigma.canvas.edges.tapered = function(edge, source, target, context, settings) {
    // The goal is to draw a triangle where the target node is a point of
    // the triangle, and the two other points are the intersection of the
    // source circle and the circle (target, distance(source, target)).
    var color = edge.active ?
          edge.active_color || settings('defaultEdgeActiveColor') :
          edge.color,
        prefix = settings('prefix') || '',
        size = edge[prefix + 'size'] || 1,
        edgeColor = settings('edgeColor'),
        prefix = settings('prefix') || '',
        defaultNodeColor = settings('defaultNodeColor'),
        defaultEdgeColor = settings('defaultEdgeColor'),
        sX = source[prefix + 'x'],
        sY = source[prefix + 'y'],
        tX = target[prefix + 'x'],
        tY = target[prefix + 'y'],
        dist = sigma.utils.getDistance(sX, sY, tX, tY);

    if (!color)
      switch (edgeColor) {
        case 'source':
          color = source.color || defaultNodeColor;
          break;
        case 'target':
          color = target.color || defaultNodeColor;
          break;
        default:
          color = defaultEdgeColor;
          break;
      }

    // Intersection points:
    var c = sigma.utils.getCircleIntersection(sX, sY, size, tX, tY, dist);

    context.save();

    var grd=context.createLinearGradient(sX,sY,tX,tY);
    grd.addColorStop(0,shadeColor(source.color,30)); 
    grd.addColorStop(0.5,shadeColor(target.color,30)); 
    grd.addColorStop(1,shadeColor(target.color,30));


    context.fillStyle = grd;
    context.strokeStyle = grd;
    // Turn transparency on:
    context.globalAlpha = 0.65;

    // Draw the triangle:
    context.beginPath();
    context.moveTo(tX, tY);
    context.lineTo(c.xi, c.yi);
    context.lineTo(c.xi_prime, c.yi_prime);
    context.closePath();

    context.fill();

    context.restore();
  };

}();